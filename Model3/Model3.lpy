import random as ran
import math
from openalea.plantgl.all import *
import numpy as np
import matplotlib.pyplot as plt
import random as ran

t1 = 2;t2 = 9;t3 = 16
time_factor=1; dt=1; pre =10
MaxTime= time_factor *( t3 *24 + pre*24);
MaxSegmentLength = 0.4

###### Define Root State Classes #######
class SideData:
	def __init__(self, **kwd):
		self.__dict__.update(kwd)

class Gravitropism:
	def __init__(self, **kwd):
		self.Euler_x = 0;		self.Euler_y = 90;	self.Euler_z = 180
		self.counter = 0;   self. side =0;
		self.__dict__.update(kwd)

class state:
	def __init__(self, **kwd):
		self.__dict__.update(kwd)
		self.init_time = 0;	self.side = 0; 	self.order     = 0;  	self.segments = 0; self.priming_counter = 0
		self.ID  = self.side*1000 + self.order*100 + self.segments;
		self.length =  MaxSegmentLength;	
		self.__dict__.update(kwd)

## Define grafts
Roots1 = SideData(total_size = 0, lats = 0, LR =1, primary_length =0, secondary_length = 0, meristem_size = 0,Primordia=0) #WT/WT
Roots2 = SideData(total_size = 0, lats = 0, LR =1, primary_length =0, secondary_length = 0, meristem_size = 0,Primordia=0) #WT/bri
Roots3 = SideData(total_size = 0, lats = 0, LR =1, primary_length =0, secondary_length = 0, meristem_size = 0,Primordia=0) #bri/WT
Roots4 = SideData(total_size = 0, lats = 0, LR =1, primary_length =0, secondary_length = 0, meristem_size = 0,Primordia=0) #bri/bri

####### Define start and end simulation (plots, save data etc.) #######
def Start():
	global TAdiv1, TAdiv2; TAdiv1 =  basal1/time_factor; TAdiv2 =  basal2/time_factor; 
	global TAdiv3, TAdiv4; TAdiv3 =  basal3/time_factor; TAdiv4 =  basal4/time_factor; 

	plt.close("all")
	global time;	time = 0;	global time_store;  time_store = np.array(0);	
	global LRn1_store;  LRn1_store = np.array(0);	global LRn2_store;  LRn2_store = np.array(0);
	global LRn3_store;  LRn3_store = np.array(0);	global LRn4_store;  LRn4_store = np.array(0);		

	global Root1_store; Root1_store = np.array(Roots1.total_size);	global Root2_store; Root2_store = np.array(Roots2.total_size);
	global Root3_store; Root3_store = np.array(Roots3.total_size);	global Root4_store; Root4_store = np.array(Roots4.total_size);
		
	global LR1_store;		LR1_store = np.array(Roots1.secondary_length);	global LR2_store;		LR2_store = np.array(Roots2.secondary_length);
	global LR3_store;		LR3_store = np.array(Roots3.secondary_length);	global LR4_store;		LR4_store = np.array(Roots4.secondary_length);
		
	global PR1_store;		PR1_store = np.array(Roots1.primary_length);	global PR2_store;		PR2_store = np.array(Roots2.primary_length);
	global PR3_store;		PR3_store = np.array(Roots3.primary_length);	global PR4_store;		PR4_store = np.array(Roots4.primary_length);

def StartEach():
	global time;
	time += dt

def EndEach():
	global Root1_store, Root2_store,Root3_store,Root4_store,LR1_store,LR2_store,LR3_store,LR4_store,PR1_store,PR2_store,PR3_store,PR4_store, time, LRn1_store,LRn2_store,LRn3_store,LRn4_store

	if time % (1) == 0:
		LRn1_store = np.append(LRn1_store, Roots1.lats);		LRn2_store = np.append(LRn2_store, Roots2.lats);
		LRn3_store = np.append(LRn3_store, Roots3.lats);		LRn4_store = np.append(LRn4_store, Roots4.lats);
		
		Root1_store = np.append(Root1_store,Roots1.total_size);		Root2_store = np.append(Root2_store,Roots2.total_size);
		Root3_store = np.append(Root3_store,Roots3.total_size);		Root4_store = np.append(Root4_store,Roots4.total_size);		
		
		LR1_store = np.append(LR1_store,Roots1.secondary_length);		LR2_store = np.append(LR2_store,Roots2.secondary_length);
		LR3_store = np.append(LR3_store,Roots3.secondary_length);		LR4_store = np.append(LR4_store,Roots4.secondary_length);
		
		PR1_store = np.append(PR1_store,Roots1.primary_length);		PR2_store = np.append(PR2_store,Roots2.primary_length);
		PR3_store = np.append(PR3_store,Roots3.primary_length);		PR4_store = np.append(PR4_store,Roots4.primary_length);
		
		if time ==time_factor*(24*t1 + pre*24):
			global TL1_d0, TL2_d0, TL3_d0,TL4_d0,LRn1_d0, LRn2_d0,LRn3_d0,LRn4_d0, BI1_d0, BI2_d0,BI3_d0,BI4_d0, FW1_d0, FW2_d0,FW3_d0,FW4_d0
			TL1_d0 = Roots1.total_size; TL2_d0 = Roots2.total_size;TL3_d0 = Roots3.total_size;TL4_d0= Roots4.total_size
			LRn1_d0=Roots1.lats;LRn2_d0=Roots2.lats;	LRn3_d0=Roots3.lats;LRn4_d0=Roots4.lats
			BI1_d0= LRn1_d0/TL1_d0; BI2_d0 = LRn2_d0/TL2_d0;BI3_d0= LRn3_d0/TL3_d0; BI4_d0 = LRn4_d0/TL4_d0;
			
			global PR1_d0,PR2_d0,PR3_d0,PR4_d0,LR1_d0,LR2_d0,LR3_d0,LR4_d0
			PR1_d0 =  Roots1.primary_length;			PR2_d0=Roots2.primary_length; PR3_d0=Roots3.primary_length; PR4_d0= Roots4.primary_length;
			LR1_d0 = Roots1.secondary_length;		LR2_d0= Roots2.secondary_length;LR3_d0= Roots3.secondary_length;LR4_d0= Roots4.secondary_length;
			
			FW1_d0= TL1_d0 * np.pi *(0.15 *0.15)*2.5*4
			FW2_d0= TL2_d0 * np.pi *(0.15 *0.15*1.25*1.25)*2.5*4
			FW3_d0= TL3_d0 * np.pi *(0.15 *0.15)*2.5*4
			FW4_d0= TL4_d0 * np.pi *(0.15 *0.15*1.25*1.25)*2.5*4	
			
		if time ==time_factor*(24* t2 +pre*24):
			global TL1_d7, TL2_d7, TL3_d7,TL4_d7,LRn1_d7, LRn2_d7,LRn3_d7,LRn4_d7, BI1_d7, BI2_d7,BI3_d7,BI4_d7, FW1_d7, FW2_d7,FW3_d7,FW4_d7
			TL1_d7 = Roots1.total_size; TL2_d7 = Roots2.total_size;TL3_d7 = Roots3.total_size;TL4_d7= Roots4.total_size
			LRn1_d7=Roots1.lats;LRn2_d7=Roots2.lats;	LRn3_d7=Roots3.lats;LRn4_d7=Roots4.lats-1
			BI1_d7= LRn1_d7/TL1_d7; BI2_d7 = LRn2_d7/TL2_d7;BI3_d7= LRn3_d7/TL3_d7; BI4_d7 = LRn4_d7/TL4_d7;
			
			global PR1_d7,PR2_d7,PR3_d7,PR4_d7,LR1_d7,LR2_d7,LR3_d7,LR4_d7
			PR1_d7 =  Roots1.primary_length;			PR2_d7=Roots2.primary_length; PR3_d7=Roots3.primary_length; PR4_d7= Roots4.primary_length;
			LR1_d7 = Roots1.secondary_length;			LR2_d7= Roots2.secondary_length;LR3_d7= Roots3.secondary_length;LR4_d7= Roots4.secondary_length;
			
			FW1_d7= TL1_d7 * np.pi *(0.15 *0.15)*2.5*4
			FW2_d7= TL2_d7 * np.pi *(0.15 *0.15*1.25*1.25)*2.5*4
			FW3_d7= TL3_d7 * np.pi *(0.15 *0.15)*2.5*4
			FW4_d7= TL4_d7 * np.pi *(0.15 *0.15*1.25*1.25)*2.5*4
			
		if time ==time_factor*(24 * t3 +pre*24):
			global TL1, TL2, TL3,TL4,LRn1, LRn2,LRn3,LRn4, BI1, BI2,BI3,BI4, FW1, FW2,FW3,FW4
			TL1 = Roots1.total_size; TL2 = Roots2.total_size;TL3 = Roots3.total_size;TL4 = Roots4.total_size
			LRn1=Roots1.lats;LRn2=Roots2.lats;	LRn3=Roots3.lats;LRn4=Roots4.lats-1
			BI1= LRn1/TL1; BI2 = LRn2/TL2;BI3= LRn3/TL3; BI4 = LRn4/TL4;
			
			FW1= TL1 * np.pi *(0.15 *0.15)*2.5*4
			FW2= TL2 * np.pi *(0.15 *0.15*1.25*1.25)*2.5*4
			FW3= TL3 * np.pi *(0.15 *0.15)*2.5*4
			FW4= TL4 * np.pi *(0.15 *0.15*1.25*1.25)*2.5*4

Axiom:  MoveRel(-75,0,0)  EulerAngles(180,270,90) [RS(state(length=0.1*MaxSegmentLength,plant=1)) RA(state(length=0.01*MaxSegmentLength,plant=1), Gravitropism())] MoveRel(0,0,10)  MoveRel(50,0,-10) [RS(state(length=0.1*MaxSegmentLength,plant=2)) RA(state(length=0.01*MaxSegmentLength,plant=2), Gravitropism())] MoveRel(50,0,-10) [RS(state(length=0.1*MaxSegmentLength,plant=3)) RA(state(length=0.01*MaxSegmentLength,plant=3), Gravitropism())]  MoveRel(50,0,-10) [RS(state(length=0.1*MaxSegmentLength,plant=4)) RA(state(length=0.01*MaxSegmentLength,plant=4), Gravitropism())]

####### Define simulation time #######
derivation length: MaxTime

####### Growth rules #######
production:
RA(state_ra,g):
	age = 	time - state_ra.init_time;
	Km_meristemsize_age = 48*time_factor;
	
	if state_ra.plant == 1:
		maxMeristemSize = ml1; Roots = Roots1;TAdiv=TAdiv1
	elif state_ra.plant == 2:
		if time<pre*24:  maxMeristemSize = ml2; Roots = Roots2;TAdiv=TAdiv4
		else:	maxMeristemSize = ml2; Roots = Roots2;TAdiv=TAdiv2
	elif state_ra.plant == 3:
		if time<pre*24:  maxMeristemSize = ml1; Roots = Roots3;TAdiv=TAdiv1
		else: maxMeristemSize = ml1; Roots = Roots3;TAdiv=TAdiv3
	elif state_ra.plant == 4:
		maxMeristemSize = ml2-5; Roots = Roots4;TAdiv=TAdiv4
	
	state_ra.meristem_size = max(1,maxMeristemSize * age**2 / (age**2 + Km_meristemsize_age**2));
	state_ra.meristem_size = round(state_ra.meristem_size)

	TAd= TAdiv * time_factor * (g_l**(state_ra.order*2))  ;
	ratio=5
	SCdiv=TAd/ratio; beta= 0.35;
	cellproduction = np.log(2)*state_ra.meristem_size*TAd
	em_rate = 0.2 *  stoch*(0.05*cellproduction+0.029)/(0.109*cellproduction+0.29) #van der berg et al., 2021 - Fig 7
	freq = em_rate*(TAd +( beta*(TAd-SCdiv) - ((TAd-SCdiv)/state_ra.meristem_size)) * np.log2(state_ra.meristem_size)) 
	priming_time = round(1/(freq/time_factor));
        
	if age %(priming_time) == 0:
		new_rp = state(); new_rp.init_time=time; new_rp.order =1; new_rp.length=0; new_rp.plant=state_ra.plant; new_rp.order = state_ra.order+1;new_rp.segments=0;
		new_rs = state(length=state_ra.length,plant = state_ra.plant);
		
		state_ra.length= 0;	state_ra.segments = state_ra.segments +1;
		
		state_ra.length = state_ra.length + calcGrowth(state_ra);
		Roots.total_size = Roots.total_size+ calcGrowth(state_ra);
		if state_ra.order == 0:
			Roots.primary_length = Roots.primary_length + calcGrowth(state_ra)
		elif state_ra.order > 0:
			Roots.secondary_length = Roots.secondary_length + calcGrowth(state_ra)
		state_ra.priming_counter = 0;
		
		Roots.LR = Roots.LR  * -1; new_rp.LR = 	Roots.LR; state_ra.LR= Roots.LR
		if state_ra.order==0:
			Roots.Primordia = Roots.Primordia+1
			produce RS(new_rs) [&(Roots.LR * 60)   RP(new_rp,g)]  &(ran.randint(-2,2)) RA(state_ra,g)
		
		elif state_ra.order > 0 and state_ra.order < 2 :
			Roots.Primordia = Roots.Primordia+1;
			produce  RS(new_rs) [&(Roots.LR * 60)   RP(new_rp,g)]  &(state_ra.LR*-5) RA(state_ra,g)
		
		else:
			produce RS(new_rs) &(ran.randint(-2,2)) RA(state_ra,g)
	
	#Grow if RA is smaller than max size
	else:
		state_ra.length = state_ra.length + calcGrowth(state_ra)
		Roots.total_size = Roots.total_size+ calcGrowth(state_ra);
		if state_ra.order == 0:
			Roots.primary_length = Roots.primary_length + calcGrowth(state_ra)
		elif state_ra.order > 0:
			Roots.secondary_length = Roots.secondary_length + calcGrowth(state_ra)
		produce RA(state_ra,g)

RP(state_rp,g):
	if   state_rp.plant == 1: Roots = Roots1; em_age = 48; 
	elif state_rp.plant == 2: 
		if time<pre*24: Roots = Roots2; em_age = 120; 
		else: Roots = Roots2; em_age = 48; 
	elif state_rp.plant == 3: 
		if time<pre*24: Roots = Roots3; em_age = 48; 
		else: Roots = Roots3; em_age = 120; 
	elif state_rp.plant == 4: Roots = Roots4; em_age = 120; 
	
	age = 	time - state_rp.init_time;
	if age == em_age*time_factor :
		Emergence_succes =  em;
		
		if ran.random()<=Emergence_succes:
			Roots.lats = Roots.lats+ 1;
			state_rp.length=0;
			state_rp.init_time = time;
			produce  RA(state_rp,g)
		else:
			produce

#### Graphical representation ####
interpretation:

RA(state_ra,g):
	produce: ,(0)F(np.float(state_ra.length*10), 0.15)

RS(state_rs):
	produce: ,(0)F(np.float(state_rs.length*10), 0.25)
endlsystem

def calcGrowth(statex):
	global TAdiv1, TADiv2,TAdiv3,TAdiv4
	if statex.plant == 1:
		maxMeristemSize = ml1; Roots = Roots1;TAdiv=TAdiv1
	elif statex.plant == 2:
		if time<pre*24:  maxMeristemSize = ml2; Roots = Roots2;TAdiv=TAdiv4
		else:	maxMeristemSize = ml2*1.5; Roots = Roots2;TAdiv=TAdiv2
	elif statex.plant == 3:
		if time<pre*24:  maxMeristemSize = ml1; Roots = Roots3;TAdiv=TAdiv1
		else: maxMeristemSize = ml1; Roots = Roots3;TAdiv=TAdiv3
	elif statex.plant == 4:
		maxMeristemSize = ml2-5; Roots = Roots4;TAdiv=TAdiv4
			
	cellproduction = np.log(2)*statex.meristem_size*TAdiv
	elongation_rate_TA = 0.0025#0.0025 # (cm/cell/hr)
	growth = cellproduction*elongation_rate_TA * (g_l**statex.order)
	return growth